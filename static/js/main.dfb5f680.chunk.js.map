{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","dataToLearn","name","rgb","values","useState","r","setR","g","setG","b","setB","inputsToLearn","setInputsToLearn","answersToLearn","setAnswersToLearn","tsInputsToLearn","setTSInputsToLearn","tsAnswersToLearn","setTSAnswersToLearn","model","setModel","predictedName","setPredictedName","predictedValue","setPredictedValue","isReady","setIsReady","correctionShow","setCorrectionShow","haveModel","setHaveModel","isTrain","setIsTrain","handleTrainModel","a","i","fit","epochs","console","log","message","handlePredictColor","colorRGB","colorToPredict","tf","resPredict","predict","data","predictData","maxValue","Math","max","index","indexOf","handleSaveModel","save","handleLoadModel","tempModel","compile","optimizer","adam","loss","meanSquaredError","metrics","handleRigth","input","parseInt","answer","handleSubmitCorrectColor","e","target","value","split","map","x","useEffect","tempInputs","tempAnswers","forEach","push","handleFormatDataToLearn","className","onClick","length","add","dense","inputShape","units","useBias","error","disabled","style","margin","width","height","border","backgroundColor","textAlign","type","min","onChange","padding","id","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfb5f680.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport * as tf from '@tensorflow/tfjs'\n\nimport './App.css';\nfunction App() {\n\n  const dataToLearn = [\n    {\n      name: 'Red',\n      rgb: [255, 0, 0],\n      values: [[255, 160, 122], [250, 128, 114], [233, 150, 122], [240, 128, 128], [205, 92, 92], [220, 20, 60], [178, 34, 34], [255, 0, 0], [139, 0, 0], [128, 0, 0], [255, 99, 71], [255, 69, 0], [219, 112, 147]]\n    },\n    {\n      name: 'Green',\n      rgb: [0, 255, 0],\n      values: [[124, 252, 0], [127, 255, 0], [50, 205, 50], [34, 139, 34], [0, 128, 0], [0, 100, 0], [173, 255, 47], [154, 205, 50], [0, 255, 127], [0, 250, 154], [144, 238, 144], [152, 251, 152], [143, 188, 143], [60, 179, 113], [32, 178, 170], [46, 139, 87], [128, 128, 0], [85, 107, 47], [107, 142, 35]]\n    },\n    {\n      name: 'Blue',\n      rgb: [0, 0, 255],\n      values: [[240, 248, 255], [230, 230, 250], [176, 224, 230], [173, 216, 230], [135, 206, 250], [135, 206, 235], [0, 191, 255], [176, 196, 222], [30, 144, 255], [100, 149, 237], [70, 130, 180], [95, 158, 160], [123, 104, 238], [106, 90, 205], [72, 61, 139], [65, 105, 225], [0, 0, 255], [0, 0, 205], [0, 0, 139], [0, 0, 128], [25, 25, 112], [138, 43, 226], [75, 0, 130]]\n    },\n    {\n      name: 'Yellow',\n      rgb: [255, 255, 0],\n      values: [[255, 255, 204], [255, 255, 153], [255, 255, 102], [255, 255, 51], [255, 255, 0], [204, 204, 0], [153, 153, 0]]\n    },\n    {\n      name: 'Orange',\n      rgb: [255, 128, 0],\n      values: [[255, 127, 80], [255, 99, 71], [255, 69, 0], [255, 165, 0], [255, 140, 0]]\n    },\n    {\n      name: 'Purple',\n      rgb: [128, 0, 128],\n      values: [[230, 230, 250], [216, 191, 216], [221, 160, 221], [238, 130, 238], [218, 112, 214], [255, 0, 255], [255, 0, 255], [186, 85, 211], [147, 112, 219], [138, 43, 226], [148, 0, 211], [153, 50, 204], [139, 0, 139], [128, 0, 128], [75, 0, 130]]\n    },\n    {\n      name: 'Pink',\n      rgb: [255, 128, 255],\n      values: [[255, 192, 203], [255, 182, 193], [255, 105, 180], [255, 20, 147], [219, 112, 147], [199, 21, 133]]\n    },\n    {\n      name: 'Gray',\n      rgb: [128, 128, 128],\n      values: [[220, 220, 220], [211, 211, 211], [192, 192, 192], [169, 169, 169], [128, 128, 128], [105, 105, 105], [119, 136, 153], [112, 128, 144], [47, 79, 79], [0, 0, 0]]\n    },\n    {\n      name: 'Brown',\n      rgb: [128, 0, 0],\n      values: [[255, 248, 220], [255, 235, 205], [255, 228, 196], [255, 222, 173], [245, 222, 179], [222, 184, 135], [210, 180, 140], [188, 143, 143], [244, 164, 96], [218, 165, 32], [205, 133, 63], [210, 105, 30], [139, 69, 19], [160, 82, 45], [165, 42, 42], [128, 0, 0]]\n    }\n  ]\n\n  const [r, setR] = useState(0)\n  const [g, setG] = useState(0)\n  const [b, setB] = useState(0)\n\n\n  const [inputsToLearn, setInputsToLearn] = useState([]);\n  const [answersToLearn, setAnswersToLearn] = useState([]);\n\n  const [tsInputsToLearn, setTSInputsToLearn] = useState([]);\n  const [tsAnswersToLearn, setTSAnswersToLearn] = useState([]);\n\n  const [model, setModel] = useState();\n\n  const [predictedName, setPredictedName] = useState('');\n  const [predictedValue, setPredictedValue] = useState([]);\n\n  const [isReady, setIsReady] = useState(true);\n\n  const [correctionShow, setCorrectionShow] = useState(false);\n\n  const [haveModel, setHaveModel] = useState(false);\n  const [isTrain, setIsTrain] = useState(false);\n\n  const handleFormatDataToLearn = () => {\n    const tempInputs = [];\n    const tempAnswers = [];\n\n    dataToLearn.forEach((data) => {\n      data.values.forEach((value) => {\n        tempInputs.push(value)\n        tempAnswers.push(data.rgb)\n      })\n    })\n\n    setInputsToLearn(tempInputs);\n    setAnswersToLearn(tempAnswers);\n  }\n\n  const handleCreateModel = () => {\n    try {\n      //Input formated data to TensorFlow\n      //params: (data), [array.length, array properties(0,2,3)]\n      setTSInputsToLearn(tf.tensor2d(inputsToLearn, [inputsToLearn.length, 3]))\n      setTSAnswersToLearn(tf.tensor2d(answersToLearn, [answersToLearn.length, 3]))\n\n      // Create model\n      const tempModel = tf.sequential();\n\n      //Input settings\n      tempModel.add(tf.layers.dense({ inputShape: 3, units: 10, useBias: true }));\n\n      //Output settings\n      tempModel.add(tf.layers.dense({ inputShape: 10, units: 3, useBias: true }));\n\n      // model compilation\n      tempModel.compile({\n        optimizer: tf.train.adam(),\n        loss: tf.losses.meanSquaredError,\n        metrics: ['mse'],\n      })\n\n      setModel(tempModel)\n      setHaveModel(true)\n      console.log('Created')\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n\n  const handleTrainModel = async () => {\n    setIsReady(false)\n    try {\n      for (let i = 0; i < 15; i++) {\n        const resTrain = await model.fit(tsInputsToLearn, tsAnswersToLearn, { epochs: 20 }); //epochs = Épocas [Processa 20x para cada trinamento. Quanto mais melhor]\n      }\n      setIsTrain(true)\n    } catch (error) {\n      console.log('error train: ', error.message)\n    }\n    setIsReady(true)\n  }\n\n\n  const handlePredictColor = async (colorRGB) => {\n    // get input data to test\n    const colorToPredict = tf.tensor2d(colorRGB, [1, 3])\n\n    // Execute \n    const resPredict = model.predict(colorToPredict);\n\n    const predictData = await resPredict.data();\n\n    const maxValue = Math.max(...predictData);\n\n    const index = predictData.indexOf(maxValue);\n\n    setPredictedName(dataToLearn[index].name);\n    setPredictedValue(dataToLearn[index].rgb);\n\n    console.log('The color is: ', dataToLearn[index].name, dataToLearn[index].rgb)\n    return dataToLearn[index].name;\n  }\n\n  const handleSaveModel = async () => {\n    setIsReady(false)\n    await model.save('localstorage://predict-colors-model');\n    setIsReady(true)\n  }\n\n  const handleLoadModel = async () => {\n    setIsReady(false)\n    const tempModel = await tf.loadLayersModel('localstorage://predict-colors-model')\n    // model compilation\n    tempModel.compile({\n      optimizer: tf.train.adam(),\n      loss: tf.losses.meanSquaredError,\n      metrics: ['mse'],\n    })\n    setModel(tempModel);\n    setIsTrain(true)\n    setIsReady(true)\n  }\n\n\n  const handleRigth = async () => {\n    const input = tf.tensor2d([parseInt(r), parseInt(g), parseInt(b)], [1, 3]);\n    const answer = tf.tensor2d(predictedValue, [1, 3]);\n    await model.fit(input, answer, { epochs: 1 });\n  }\n\n  const handleSubmitCorrectColor = async e => {\n    const input = tf.tensor2d([parseInt(r), parseInt(g), parseInt(b)], [1, 3]);\n    const answer = tf.tensor2d(e.target.value.split`,`.map(x=>+x), [1, 3]);\n    await model.fit(input, answer, { epochs: 1 });\n    setCorrectionShow(false)\n  }\n\n  useEffect(() => {\n    handleFormatDataToLearn()\n  }, [])\n  return (\n    <div className=\"App\">\n      <div className=\"sidebarContainer\">\n      <h2> Neural Network to Predicted Colors </h2>\n        <button onClick={handleCreateModel} disabled={haveModel}> Create Model </button>\n        <button onClick={handleLoadModel} disabled={haveModel}> Load Model </button>\n        <button onClick={handleTrainModel} disabled={isTrain}> Train Model </button>\n        <button onClick={handleSaveModel} disabled={!isTrain}> Save Model </button>\n      </div>\n\n      <div className=\"mainContainer\">\n        <div style={{ margin: 'auto', width: 80, height: 80, border: '1px black solid', backgroundColor: 'rgb(' + r + ',' + g + ',' + b + ')' }} />\n        <br />\n        <b> RGB({r+','+g+','+b}) </b>\n        <div style={{ textAlign: 'center' }}>\n          <input disabled={!isTrain} type=\"range\" min=\"0\" max=\"255\" value={r} onChange={e => setR(e.target.value)} />\n          <input disabled={!isTrain} type=\"range\" min=\"0\" max=\"255\" value={g} onChange={e => setG(e.target.value)} />\n          <input disabled={!isTrain} type=\"range\" min=\"0\" max=\"255\" value={b} onChange={e => setB(e.target.value)} />\n        </div>\n\n        <button onClick={() => handlePredictColor([parseInt(r), parseInt(g), parseInt(b)])} disabled={!isTrain}> Predict Color </button>\n\n        <div>\n          <h3 style={{ padding: 5, textAlign: 'center' }}>Colos is: {predictedName}</h3>\n          <button onClick={handleRigth} disabled={!isTrain && (predictedName.length > 0)} id=\"btnRigth\"> Rigth </button>\n          <button onClick={e=>setCorrectionShow(true)} disabled={!isTrain && (predictedName.length > 0)} id=\"btnWrong\"> Wrong </button>\n        </div>\n\n\n      </div>\n      {<div className=\"loading\" style={isReady ? { visibility: 'hidden' } : { visibility: 'visible' }}><h1> Loading... </h1></div>}\n      {<div className=\"correction\" style={correctionShow ? { visibility: 'visible' } : { visibility: 'hidden' }}>\n        <h3> What color is correct? </h3>\n        <button className=\"btnCorrection\" value={[255, 0, 0]} onClick={handleSubmitCorrectColor}> Red </button>\n        <button className=\"btnCorrection\" value={[0, 255, 0]} onClick={handleSubmitCorrectColor}> Green </button>\n        <button className=\"btnCorrection\" value={[0, 0, 255]} onClick={handleSubmitCorrectColor}> Blue </button>\n        <button className=\"btnCorrection\" value={[255, 255, 0]} onClick={handleSubmitCorrectColor}> Yellow </button>\n        <button className=\"btnCorrection\" value={[255, 128, 0]} onClick={handleSubmitCorrectColor}> Orange </button>\n        <button className=\"btnCorrection\" value={[128, 0, 128]} onClick={handleSubmitCorrectColor}> Purple </button>\n        <button className=\"btnCorrection\" value={[255, 128, 255]} onClick={handleSubmitCorrectColor}> Pink </button>\n        <button className=\"btnCorrection\" value={[128, 128, 128]} onClick={handleSubmitCorrectColor}> Gray </button>\n        <button className=\"btnCorrection\" value={[128, 0, 0]} onClick={handleSubmitCorrectColor}> Brown </button>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}